# trigger: none

trigger: 
- master

# schedules:
# - cron: "0 17 * * 6"
#   displayName: Saturday build at 11 AM (MST) 5 PM (UTC)
#   branches:
#     include:
#     - master
#   always: true

jobs:
- job: default
  timeoutInMinutes: 60
  cancelTimeoutInMinutes: 30
  pool:
    vmImage: 'vs2017-win2016'
  variables:
    imageOffer: '[{"Offer":"SQL2016SP2-WS2016"}]'

  steps:
  - task: AzurePowerShell@5
    displayName: 'Install SQL VMs'
    inputs:
      azureSubscription: 'SQLCodeTestingDemo'
      scriptType: 'FilePath'
      scriptPath: 'Install-SqlVm.ps1'
      azurePowerShellVersion: 'latestVersion'
      failOnStandardError: True

  - task: AzurePowerShell@5
    displayName: 'Install SQL Code'
    inputs:
      azureSubscription: 'SQLCodeTestingDemo'
      scriptType: 'filePath' 
      scriptPath: 'Install-SqlCode.ps1' 
      scriptArguments: "'$(imageOffer)'"
      azurePowerShellVersion: 'latestVersion'
      failOnStandardError: True

  - task: AzurePowerShell@5
    displayName: 'Test SQL Code'
    inputs:
      azureSubscription: 'SQLCodeTestingDemo'
      scriptType: 'filePath' 
      scriptPath: 'Test-SqlCode.ps1' 
      scriptArguments: "$(Build.StagingDirectory) '$(imageOffer)'"
      azurePowerShellVersion: 'latestVersion'
      failOnStandardError: True

  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    inputs:
      searchFolder: '$(Build.StagingDirectory)'
      testResultsFormat: 'NUnit'
      testResultsFiles: 'Test-SqlCodePester.XML'
      testRunTitle: 'SQL Standard Object Unit Test'
      failTaskOnFailedTests: true

  - task: AzurePowerShell@5
    displayName: 'Uninstall SQL VMs'
    inputs:
      azureSubscription: 'SQLCodeTestingDemo'
      scriptType: 'FilePath'
      scriptPath: 'Uninstall-SqlVm.ps1'
      azurePowerShellVersion: 'latestVersion'
    condition: succeededOrFailed()

